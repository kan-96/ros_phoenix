ekf_filter_node:
  ros__parameters:
    odom_frame: odom
    base_link_frame: base_link
    world_frame: odom

    two_d_mode: true

    frequency: 50.0
    # debug_out_file: /home/kan369/Desktop/lunabotic_drexel/lunabotic_prototype/diffdrive_talon/src/ros_phoenix/debug/robot_localization.txt

    # Each sensor reading updates some or all of the filter's state. These options give you greater control over which
    # values from each measurement are fed to the filter. For example, if you have an odometry message as input, but only
    # want to use its Z position value, then set the entire vector to false, except for the third entry. The order of the
    # values is x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Note that not some message types
    # do not provide some of the state variables estimated by the filter. For example, a TwistWithCovarianceStamped message
    # has no pose information, so the first six values would be meaningless in that case. Each vector defaults to all false
    # if unspecified, effectively making this parameter required for each sensor.
    odom0: /diffbot_base_controller/odom

    odom0_config: [false, false, false,
                  false, false, false,
                  true, true, true,
                  false, false, true,
                  false, false, false]
    odom0_differential: false
    odom0_queue_size: 10

    imu0: /imu/data_raw
    imu0_config: [false, false, false,
                  true, true, true,
                  false, false, false,
                  true, true, true,
                  false, false, false]
    imu0_differential: true
    imu0_queue_size: 10
    imu0_remove_gravitational_acceleration: true

    # publish_acceleration: false
    # especially useful in situations where even small amounts of lag in convergence for a given state variable cause problems in your application
    # use_control: false
    # the order of the values is \dot{X}, \dot{Y}, \dot{Z}, \dot{roll}, \dot{pitch}, \dot{yaw}
    # stamped_control: false
    # control_config: []
    # acceleration_limits: []

    # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
    # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
    # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
    # However, if users find that a given variable is slow to converge, one approach is to increase the
    # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
    # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
    # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
    # unspecified.
    # Note: the specification of covariance matrices can be cumbersome, so all matrix parameters in this package support
    # both full specification or specification of only the diagonal values.
    # process_noise_covariance: [0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.05, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.06, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.03, 0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.03, 0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.0,    0.06, 0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025, 0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01, 0.0,    0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01, 0.0,    0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02, 0.0,    0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01, 0.0,    0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01, 0.0,
    #                         0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]
    # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
    # value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
    # question. Users should take care not to use large values for variables that will not be measured directly. The values
    # are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the diagonal values below
    # if unspecified. In this example, we specify only the diagonal of the matrix.
    # initial_estimate_covariance: [1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9]